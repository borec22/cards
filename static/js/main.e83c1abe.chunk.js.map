{"version":3,"sources":["app/appReducer.ts","utils/theme.ts","api/apiSettings.ts","api/api.ts","utils/error-utils.ts","features/SignIn/authReducer.ts","features/Routes/Routes.tsx","utils/validators.ts","features/SignIn/SignIn.tsx","assets/images/avatar-default.png","features/Profile/Profile.tsx","features/Profile/ProfileContainer.tsx","features/SignUp/SignUp.tsx","features/ForgotPassword/ForgotPassword.tsx","features/RecoveryPassword/RecoveryPassword.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Header/Header.tsx","features/Main/Main.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["APP_ACTIONS_TYPE","theme","createMuiTheme","palette","primary","main","secondary","instance","axios","create","baseURL","withCredentials","authAPI","data","post","then","response","delete","email","password","from","message","token","get","handleError","e","dispatch","error","setAppError","setAppStatus","AUTH_ACTIONS_TYPE","initialState","status","isInitialized","type","SET_STATUS","SET_ERROR","PATH","isLoggedIn","userData","isRegisteredSuccess","setIsLoggedIn","SET_IS_LOGGED_IN","payload","setIsRegisteredSuccess","SET_IS_REGISTERED_SUCCESS","SignInSchema","Yup","shape","required","min","SignUpSchema","firstPassword","secondPassword","ForgotPasswordSchema","RecoveryPasswordSchema","SignIn","console","log","useDispatch","useSelector","state","auth","formik","useFormik","initialValues","rememberMe","validationSchema","onSubmit","values","a","responseData","SET_USER_DATA","to","PROFILE_PATH","ThemeProvider","Grid","container","spacing","direction","alignItems","justify","style","minHeight","item","xs","handleSubmit","FormControl","width","FormLabel","FormGroup","TextField","label","defaultValue","margin","color","getFieldProps","touched","errors","FormControlLabel","control","Checkbox","Button","variant","marginTop","Box","mt","REGISTER_PATH","FORGOT_PATH","onClick","Profile","React","memo","userProfileData","borderRadius","height","display","marginLeft","marginRight","src","avatar","defaultPhoto","alt","fontSize","paddingLeft","name","SIGN_IN_PATH","ProfileContainer","SignUp","useEffect","textAlign","ForgotPassword","props","app","forgotPassword","backgroundColor","padding","RecoveryPassword","useParams","recoveryPassword","Routes","Container","fixed","exact","path","render","SET_NEW_PASSWORD_PATH","Alert","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","useStyles","makeStyles","createStyles","root","flexGrow","logo","links","navLink","textDecoration","selectedLink","Header","classes","className","AppBar","position","Toolbar","IconButton","edge","aria-label","Typography","activeClassName","history","push","LinearProgress","Main","App","SET_IS_INITIALIZED","top","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","createHistory","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e83c1abe.chunk.js","sourcesContent":["import {Dispatch} from 'redux';\nimport {authAPI} from '../api/api';\nimport {handleError} from '../utils/error-utils';\nimport {ThunkAction} from 'redux-thunk';\nimport {AppRootStateType} from './store';\n\nenum APP_ACTIONS_TYPE {\n   SET_STATUS = 'APP/SET-STATUS',\n   SET_ERROR = 'APP/SET-ERROR',\n   SET_IS_INITIALIZED = 'APP/SET_IS_INITIALIZED',\n}\n\nconst initialState = {\n   status: 'idle' as RequestStatusType,\n   error: null as string | null,\n   isInitialized: false\n}\n\n\nexport const appReducer = (state = initialState, action: AppActions): InitialStateType => {\n   switch (action.type) {\n      case APP_ACTIONS_TYPE.SET_STATUS:\n         return {...state, status: action.status}\n\n      case APP_ACTIONS_TYPE.SET_ERROR: {\n         return {...state, error: action.error}\n      }\n\n      case APP_ACTIONS_TYPE.SET_IS_INITIALIZED: {\n         return {...state, isInitialized: action.isInitialized}\n      }\n\n      default:\n         return state\n   }\n}\n\n\n// actions\nexport const setAppStatus = (status: RequestStatusType) =>\n   ({type: APP_ACTIONS_TYPE.SET_STATUS, status} as const);\n\nexport const setAppError = (error: null | string) =>\n   ({type: APP_ACTIONS_TYPE.SET_ERROR, error} as const);\n\nexport const setIsInitialized = (isInitialized: boolean) =>\n   ({type: APP_ACTIONS_TYPE.SET_IS_INITIALIZED, isInitialized} as const);\n\n\n// thunks\nexport const initializeApp = (): ThunkAction<Return, AppRootStateType, ExtraArgument, AppActions> =>\n   async (dispatch: Dispatch) => {\n      try {\n         dispatch(setAppStatus('loading'));\n\n         const data = await authAPI.me();\n\n         dispatch(setAppStatus('succeeded'));\n         dispatch(setIsInitialized(true));\n      } catch (e) {\n         handleError(e, dispatch);\n      }\n   }\n\n\n// types\ntype Return = void;\ntype ExtraArgument = {};\ntype IGetState = () => AppRootStateType;\n\nexport type InitialStateType = typeof initialState\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\n\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatus>;\nexport type SetAppErrorActionType = ReturnType<typeof setAppError>;\n\ntype AppActions =\n   | SetAppStatusActionType\n   | SetAppErrorActionType\n   | ReturnType<typeof setIsInitialized>","import {createMuiTheme} from '@material-ui/core';\n\nexport const theme = createMuiTheme({\n   palette: {\n      primary: {\n         main: '#00695f'\n      },\n      secondary: {\n         main: '#009688'\n      },\n   },\n});","import axios from 'axios';\n\nexport const settings = {\n   withCredentials: true,\n}\n\nexport let instance = axios.create({\n   baseURL: 'https://neko-back.herokuapp.com/2.0/',\n   // baseURL: 'http://localhost:7542/2.0/',\n   ...settings\n})","import {instance} from './apiSettings';\n\nexport interface ISignInData {\n\n}\n\n\nexport const authAPI = {\n   login(data: LoginParamsType) {\n      return instance.post<ResponseLoginType>('auth/login', data)\n         .then(response => response.data);\n   },\n   logout() {\n      return instance.delete<ResponseLoginType>('auth/me')\n         .then(response => response.data);\n   },\n   register(email: string, password: string) {\n      return instance.post<ResponseRegisterType>('auth/register', {email, password})\n         .then(response => response.data);\n   },\n   forgotPassword: (email: string) => {\n      return instance.post<ResponseForgotPasswordType>('/auth/forgot', {\n         email,\n         from: 'front-admin <serhioromanchuk@gmail.com>',\n         message: `<div style=\"background-color: lime; padding: 15px\">\t\n\t                         password recovery link: \t\t\n                            <!-- <a href='https://borec22.github.io/cards/#/set-new-password/$token$'>link</a>-->\n\t                         <a href='http://localhost:3000/set-new-password/$token$'>link</a>\n\t                      </div>`\n\n      })\n         .then(response => response.data);\n   },\n   recoveryPassword(password: string, token: string) {\n      return instance.post<ResponseRecoveryPasswordType>(`auth/set-new-password`, {\n         'password': password,\n         'resetPasswordToken': token\n      })\n         .then(response => response.data)\n   },\n   me() {\n      return instance.get<ResponseMeType>('auth/me');\n   }\n};\n\n\n// types\ntype ResponseRecoveryPasswordType = {\n   'error': string\n   'method': string\n   'url': string\n   'query': Object\n   'body': {\n      'password': string\n      'resetPasswordToken': string\n   }\n}\n\ntype ResponseForgotPasswordType = {\n   info: string,\n   success: boolean,\n   answer: boolean,\n   html: boolean\n}\n\nexport type LoginParamsType = {\n   email: string,\n   password: string,\n   rememberMe: boolean\n}\n\ntype ResponseMeType = ResponseLoginType;\n\nexport type ResponseLoginType = {\n   '_id': string,\n   'email': string,\n   'rememberMe': boolean,\n   'isAdmin': boolean,\n   'name': string,\n   'verified': boolean,\n   'publicCardPacksCount': number,\n   'created': string,\n   'updated': string,\n   '__v': number,\n   'token': string,\n   'tokenDeathTime': number\n   avatar: string;\n}\n\ntype ResponseRegisterType = {\n   'addedUser': {\n      '_id': string,\n      'email': string,\n      'rememberMe': boolean,\n      'isAdmin': boolean,\n      'name': string,\n      'verified': boolean,\n      'publicCardPacksCount': number,\n      'created': string,\n      'updated': string,\n      '__v': number\n   }\n}\n","import {Dispatch} from 'redux';\nimport {setAppError, SetAppErrorActionType, setAppStatus, SetAppStatusActionType} from '../app/appReducer';\n\nexport const handleError = (e: ErrorType, dispatch: ErrorUtilsDispatchType) => {\n   const error = e.response\n      ? e.response.data.error\n      : (e.message);\n\n   dispatch(setAppError(error));\n   dispatch(setAppStatus('failed'));\n}\n\n\n// types\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>\ntype ErrorType = {\n   message: string,\n   response: {\n      data: {\n         error: string\n      }\n   }\n}","import {authAPI, LoginParamsType, ResponseLoginType} from '../../api/api';\nimport {ThunkAction} from 'redux-thunk';\nimport {AppRootStateType} from '../../app/store';\nimport {setAppError, SetAppErrorActionType, setAppStatus, SetAppStatusActionType} from '../../app/appReducer';\nimport {handleError} from '../../utils/error-utils';\n\nenum AUTH_ACTIONS_TYPE {\n   SET_IS_LOGGED_IN = 'AUTH/SET-IS-LOGGED-IN',\n   SET_USER_DATA = 'AUTH/SET_USER_DATA',\n   SET_IS_REGISTERED_SUCCESS = 'AUTH/SET_IS_REGISTERED_SUCCESS',\n}\n\nconst initialState = {\n   isLoggedIn: false as boolean,\n   userData: null as null | UserType,\n   isRegisteredSuccess: false as boolean\n}\n\n\nexport const authReducer = (state = initialState, action: AuthActions): AuthInitialStateType => {\n   switch (action.type) {\n      case AUTH_ACTIONS_TYPE.SET_IS_LOGGED_IN:\n      case AUTH_ACTIONS_TYPE.SET_IS_REGISTERED_SUCCESS:\n      case AUTH_ACTIONS_TYPE.SET_USER_DATA: {\n         return {...state, ...action.payload}\n      }\n\n      default:\n         return state\n   }\n}\n\n\n// actions\nexport const setIsLoggedIn = (isLoggedIn: boolean) =>\n   ({type: AUTH_ACTIONS_TYPE.SET_IS_LOGGED_IN, payload: {isLoggedIn}} as const)\n\nexport const setUserData = (userData: UserType) =>\n   ({type: AUTH_ACTIONS_TYPE.SET_USER_DATA, payload: {userData}} as const)\n\nexport const setIsRegisteredSuccess = (isRegisteredSuccess: boolean) =>\n   ({type: AUTH_ACTIONS_TYPE.SET_IS_REGISTERED_SUCCESS, payload: {isRegisteredSuccess}} as const)\n\n\n// thunks\nexport const login = (data: LoginParamsType): ThunkAction<Return, AppRootStateType, ExtraArgument, AuthActions> =>\n   async (dispatch) => {\n      try {\n         dispatch(setAppStatus('loading'));\n\n         const responseData = await authAPI.login(data);\n\n         dispatch(setUserData(responseData));\n         dispatch(setIsLoggedIn(true));\n         dispatch(setAppStatus('succeeded'));\n      } catch (e) {\n         handleError(e, dispatch);\n      }\n   }\n\nexport const logout = (): ThunkAction<Return, AppRootStateType, ExtraArgument, AuthActions> =>\n   async (dispatch) => {\n      try {\n         dispatch(setAppStatus('loading'));\n\n         const data = await authAPI.logout();\n\n         dispatch(setIsLoggedIn(false));\n         dispatch(setAppStatus('succeeded'));\n      } catch (e) {\n         handleError(e, dispatch);\n      }\n   }\n\nexport const register = (email: string, password: string): ThunkAction<Return, AppRootStateType, ExtraArgument, AuthActions> =>\n   async (dispatch) => {\n      try {\n         dispatch(setAppStatus('loading'));\n\n         const data = await authAPI.register(email, password);\n\n         dispatch(setIsRegisteredSuccess(true));\n         dispatch(setAppStatus('succeeded'));\n      } catch (e) {\n         handleError(e, dispatch);\n      }\n   }\n\nexport const forgotPassword = (email: string): ThunkAction<Return, AppRootStateType, ExtraArgument, AuthActions> =>\n   async (dispatch) => {\n      try {\n         dispatch(setAppStatus('loading'));\n\n         const data = await authAPI.forgotPassword(email);\n\n         dispatch(setAppStatus('succeeded'));\n      } catch (e) {\n         handleError(e, dispatch);\n      }\n   }\n\nexport const recoveryPassword = (password: string, token: string): ThunkAction<Return, AppRootStateType, ExtraArgument, AuthActions> =>\n   async (dispatch) => {\n      try {\n         dispatch(setAppStatus('loading'));\n\n         const data = await authAPI.recoveryPassword(password, token);\n\n         dispatch(setAppStatus('succeeded'));\n      } catch (e) {\n         handleError(e, dispatch);\n      }\n   }\n\n// types\ntype Return = void;\ntype ExtraArgument = {};\ntype IGetState = () => AppRootStateType;\n\nexport type UserType = ResponseLoginType;\n\nexport type AuthInitialStateType = typeof initialState\n\ntype AuthActions =\n   | ReturnType<typeof setIsLoggedIn>\n   | ReturnType<typeof setUserData>\n   | ReturnType<typeof setIsRegisteredSuccess>\n   | SetAppStatusActionType\n   | SetAppErrorActionType\n","import React from 'react';\nimport {Switch, Redirect, Route} from 'react-router-dom';\nimport {SignIn} from '../SignIn/SignIn';\nimport {Container} from '@material-ui/core';\nimport {Profile} from '../Profile/Profile';\nimport {ProfileContainer} from '../Profile/ProfileContainer';\nimport {SignUp} from '../SignUp/SignUp';\nimport {ForgotPassword} from '../ForgotPassword/ForgotPassword';\nimport {RecoveryPassword} from '../RecoveryPassword/RecoveryPassword';\n\nexport enum PATH {\n   SIGN_IN_PATH = '/sign-in',\n   PROFILE_PATH = '/profile',\n   REGISTER_PATH = '/register',\n   FORGOT_PATH = '/forgot',\n   SET_NEW_PASSWORD_PATH = '/set-new-password/:token?',\n}\n\n\nexport const Routes: React.FC = () => {\n   return (\n      <Container fixed>\n         <Switch>\n            <Route exact path={'/'} render={() => <Redirect to={PATH.PROFILE_PATH}/>}/>\n            <Route path={PATH.PROFILE_PATH} render={() => <ProfileContainer/>}/>\n\n            <Route path={PATH.SIGN_IN_PATH} render={() => <SignIn/>}/>\n            <Route path={PATH.REGISTER_PATH} render={() => <SignUp/>}/>\n            <Route path={PATH.FORGOT_PATH} render={() => <ForgotPassword/>}/>\n            <Route path={PATH.SET_NEW_PASSWORD_PATH} render={() => <RecoveryPassword/>}/>\n\n\n            {/*<Route path={STAND_PATH} render={() => <DemoSuperComponentsStand/>}/>*/}\n         </Switch>\n      </Container>\n   );\n};","import * as Yup from 'yup';\n\nexport const SignInSchema = Yup.object().shape({\n   email: Yup.string().email('Invalid email address').required('Required'),\n   password: Yup.string()\n      .min(7, 'Password must be more than 7 characters')\n      .required('Required')\n});\n\nexport const SignUpSchema = Yup.object().shape({\n   email: Yup.string().email('Invalid email address').required('Required'),\n   firstPassword: Yup.string()\n      .min(7, 'Password must be more than 7 characters')\n      .required('Required'),\n   secondPassword: Yup.string()\n      .min(7, 'Password must be more than 7 characters')\n      .required('Required')\n});\n\nexport const ForgotPasswordSchema = Yup.object().shape({\n   email: Yup.string().email('Invalid email address').required('Required')\n});\n\nexport const RecoveryPasswordSchema = Yup.object().shape({\n   firstPassword: Yup.string()\n      .min(7, 'Password must be more than 7 characters')\n      .required('Required'),\n   secondPassword: Yup.string()\n      .min(7, 'Password must be more than 7 characters')\n      .required('Required')\n});","import {Box, Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core';\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport React from 'react';\nimport {theme} from '../../utils/theme';\nimport {useFormik} from 'formik';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {login} from './authReducer';\nimport {AppRootStateType} from '../../app/store';\nimport {NavLink, Redirect} from 'react-router-dom';\nimport {PATH} from '../Routes/Routes';\nimport {SignInSchema} from '../../utils/validators';\nimport {setAppStatus} from '../../app/appReducer';\n\ntype FormikLoginErrorType = {\n   email?: string\n   password?: string\n}\n\nexport const SignIn = () => {\n   console.log('render SignIn component');\n   const dispatch = useDispatch();\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\n\n   const formik = useFormik({\n      initialValues: {\n         email: '',\n         password: '',\n         rememberMe: false\n      },\n      validationSchema: SignInSchema,\n      onSubmit: values => {\n         dispatch(login(values));\n      },\n   });\n\n   if (isLoggedIn) {\n      return <Redirect to={PATH.PROFILE_PATH}/>\n   }\n\n   return (\n      <ThemeProvider theme={theme}>\n         <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justify=\"center\"\n               style={{minHeight: '80vh'}}>\n            <Grid item xs={4}>\n               <form onSubmit={formik.handleSubmit}>\n                  <FormControl style={{width: '300px'}}>\n                     <FormLabel>\n                        <p>Use common test account credentials:</p>\n                        <p>Email: nya-admin@nya.nya</p>\n                        <p>Password: 1qazxcvBG</p>\n                     </FormLabel>\n                     <FormGroup>\n                        <TextField\n                           label=\"Email\"\n                           defaultValue={'nya-admin@nya.nya'}\n                           margin=\"normal\"\n                           color='secondary'\n                           {...formik.getFieldProps('email')}\n                        />\n                        {formik.touched && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\n\n                        <TextField\n                           type=\"password\"\n                           label=\"Password\"\n                           defaultValue={'1qazxcvBG'}\n                           margin=\"normal\"\n                           color={'secondary'}\n                           {...formik.getFieldProps('password')}\n                        />\n                        {formik.touched && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\n\n                        <FormControlLabel\n                           label={'Remember me'}\n                           control={<Checkbox color={'secondary'} {...formik.getFieldProps('rememberMe')}/>}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'secondary'} style={{marginTop: '20px'}}>Sign In</Button>\n\n                        <FormLabel style={{marginTop: '20'}}>\n                           <Box mt={5}>\n                              <p>Doesn't have a account? <NavLink to={PATH.REGISTER_PATH}>sign up</NavLink></p>\n                              <p>\n                                 Forgot <NavLink to={PATH.FORGOT_PATH} onClick={() => {\n                                    dispatch(setAppStatus('idle'));\n                              }}> password? </NavLink>\n                              </p>\n                           </Box>\n                        </FormLabel>\n                     </FormGroup>\n                  </FormControl>\n               </form>\n            </Grid>\n         </Grid>\n      </ThemeProvider>\n   );\n}","export default __webpack_public_path__ + \"static/media/avatar-default.04fa9609.png\";","import {Redirect} from 'react-router-dom';\nimport {PATH} from '../Routes/Routes';\nimport {Box, Grid} from '@material-ui/core';\nimport React from 'react';\nimport {UserType} from '../SignIn/authReducer';\nimport defaultPhoto from '../../assets/images/avatar-default.png';\n\ntype PropsType = {\n   userProfileData: UserType | null\n   isLoggedIn: boolean\n}\n\nexport const Profile: React.FC<PropsType> = React.memo((\n   {\n      userProfileData, isLoggedIn\n   }\n) => {\n   console.log('render Profile component');\n\n\n   if (!isLoggedIn) {\n      return <Redirect to={PATH.SIGN_IN_PATH}/>\n   }\n\n   return (\n      <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justify=\"center\"\n            style={{minHeight: '80vh'}}>\n         <Grid item xs={8}>\n            {userProfileData && <>\n                <img style={{\n                   borderRadius: '50%', height: 300, width: 300, display: 'block',\n                   marginLeft: 'auto',\n                   marginRight: 'auto',\n                }}\n                     src={userProfileData.avatar ? userProfileData.avatar : defaultPhoto} alt=\"\"/>\n                <Box mt={4} fontSize={'25px'}>\n                    <strong>username:</strong>\n                    <span style={{paddingLeft: '20'}}>  {userProfileData.name} </span>\n                </Box>\n            </>}\n         </Grid>\n      </Grid>\n   );\n});","import {SignIn} from '../SignIn/SignIn';\nimport {Profile} from './Profile';\nimport {useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../app/store';\nimport {AuthInitialStateType, UserType} from '../SignIn/authReducer';\n\nexport const ProfileContainer = () => {\n   const {\n      userData,\n      isLoggedIn\n   } = useSelector<AppRootStateType, AuthInitialStateType>(state => state.auth);\n\n   return (\n      <Profile userProfileData={userData} isLoggedIn={isLoggedIn}/>\n   );\n}","import {theme} from '../../utils/theme';\nimport {Box, Button, FormControl, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core';\nimport {NavLink, Redirect} from 'react-router-dom';\nimport {PATH} from '../Routes/Routes';\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport React, {useEffect} from 'react';\nimport {useFormik} from 'formik';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {SignUpSchema} from '../../utils/validators';\nimport {setAppError} from '../../app/appReducer';\nimport {AppRootStateType} from '../../app/store';\nimport {register, setIsRegisteredSuccess} from '../SignIn/authReducer';\n\nexport const SignUp = () => {\n   const dispatch = useDispatch();\n   const isRegisteredSuccess = useSelector<AppRootStateType, boolean>(state => state.auth.isRegisteredSuccess);\n\n   useEffect(() => {\n      return () => {\n         dispatch(setIsRegisteredSuccess(false));\n      }\n   })\n\n   const formik = useFormik({\n      initialValues: {\n         email: '',\n         firstPassword: '',\n         secondPassword: ''\n      },\n      validationSchema: SignUpSchema,\n      onSubmit: values => {\n         if (values.firstPassword !== values.secondPassword) {\n            dispatch(setAppError('Passwords don\\'t match!'))\n         } else {\n            // alert(JSON.stringify(values, null, 2));\n            dispatch(register(values.email, values.firstPassword));\n         }\n      },\n   });\n\n   if (isRegisteredSuccess) {\n      return <Redirect to={PATH.SIGN_IN_PATH}/>\n   }\n\n   return (\n      <ThemeProvider theme={theme}>\n         <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justify=\"center\"\n               style={{minHeight: '80vh'}}>\n            <Grid item xs={4}>\n               <form onSubmit={formik.handleSubmit}>\n                  <FormControl style={{width: '300px'}}>\n                     <FormGroup>\n                        <TextField\n                           label=\"Email\"\n                           margin=\"normal\"\n                           color='secondary'\n                           {...formik.getFieldProps('email')}\n                        />\n                        {formik.touched && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\n\n                        <TextField\n                           type=\"password\"\n                           label=\"Password\"\n                           margin=\"normal\"\n                           color={'secondary'}\n                           {...formik.getFieldProps('firstPassword')}\n                        />\n                        {formik.touched && formik.errors.firstPassword && <div style={{color: 'red'}}>{formik.errors.firstPassword}</div>}\n\n                        <TextField\n                           type=\"password\"\n                           label=\"Confirm password\"\n                           margin=\"normal\"\n                           color={'secondary'}\n                           {...formik.getFieldProps('secondPassword')}\n                        />\n                        {formik.touched.secondPassword && formik.errors.secondPassword && <div style={{color: 'red'}}>{formik.errors.secondPassword}</div>}\n\n                        <Button type={'submit'} variant={'contained'} color={'secondary'} style={{marginTop: '20px'}}>Sign Up</Button>\n\n                        <FormLabel >\n                           <Box mt={5}>\n                              <p style={{textAlign: 'center'}}><NavLink to={PATH.SIGN_IN_PATH}>sign in</NavLink></p>\n                           </Box>\n                        </FormLabel>\n                     </FormGroup>\n                  </FormControl>\n               </form>\n            </Grid>\n         </Grid>\n      </ThemeProvider>\n   );\n}","import {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../app/store';\nimport React, {useEffect} from 'react';\nimport {forgotPassword, register, setIsRegisteredSuccess} from '../SignIn/authReducer';\nimport {useFormik} from 'formik';\nimport {ForgotPasswordSchema, SignUpSchema} from '../../utils/validators';\nimport {RequestStatusType, setAppError, setAppStatus} from '../../app/appReducer';\nimport {NavLink, Redirect} from 'react-router-dom';\nimport {PATH} from '../Routes/Routes';\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport {theme} from '../../utils/theme';\nimport {Box, Button, FormControl, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core';\n\ntype PropsType = {}\n\nexport const ForgotPassword: React.FC<PropsType> = React.memo((props) => {\n   console.log('render forgot password')\n   const dispatch = useDispatch();\n   const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\n\n   const formik = useFormik({\n      initialValues: {\n         email: '',\n      },\n      validationSchema: ForgotPasswordSchema,\n      onSubmit: ({email}) => {\n         //alert(JSON.stringify(values, null, 2));\n         dispatch(forgotPassword(email));\n      },\n   });\n\n\n   return (\n      <ThemeProvider theme={theme}>\n         <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justify=\"center\"\n               style={{minHeight: '80vh'}}>\n            <Grid item xs={8}>\n               {status === 'succeeded' ? (\n                  <div style={{backgroundColor: '#d3efe0', padding: '20px', fontSize: '1.5em'}}>\n                     <h1>Check your email</h1>\n                     <p>We've sent on email to the address provided. Click the link in the email to reset your password.</p>\n                     <p>If you don't see the email, check other places it might be; kike your spam, social, or other folders</p>\n                  </div>\n               ) : (\n                  <form onSubmit={formik.handleSubmit}>\n                     <FormControl style={{width: '300px'}}>\n                        <FormGroup>\n                           <TextField\n                              label=\"Email\"\n                              margin=\"normal\"\n                              color='secondary'\n                              {...formik.getFieldProps('email')}\n                           />\n                           {formik.touched && formik.errors.email &&\n                           <div style={{color: 'red'}}>{formik.errors.email}</div>}\n\n                           <Button type={'submit'} variant={'contained'} color={'secondary'} style={{marginTop: '20px'}}>Send</Button>\n\n                           <FormLabel>\n                              <Box mt={5}>\n                                 <p style={{textAlign: 'center'}}><NavLink to={PATH.SIGN_IN_PATH}>sign in</NavLink></p>\n                              </Box>\n                           </FormLabel>\n                        </FormGroup>\n                     </FormControl>\n                  </form>\n               )}\n            </Grid>\n         </Grid>\n      </ThemeProvider>\n   );\n})","import React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../app/store';\nimport {RequestStatusType, setAppError} from '../../app/appReducer';\nimport {useFormik} from 'formik';\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport {theme} from '../../utils/theme';\nimport {Box, Button, FormControl, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core';\nimport {NavLink, Redirect, useParams} from 'react-router-dom';\nimport {PATH} from '../Routes/Routes';\nimport {RecoveryPasswordSchema} from '../../utils/validators';\nimport {recoveryPassword, register} from '../SignIn/authReducer';\n\n\ntype PropsType = {}\n\nexport const RecoveryPassword: React.FC<PropsType> = React.memo((props) => {\n   console.log('render recovery password')\n   const dispatch = useDispatch();\n   const { token } = useParams<{token?: string}>();\n   const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\n\n\n   const formik = useFormik({\n      initialValues: {\n         firstPassword: '',\n         secondPassword: '',\n      },\n      validationSchema: RecoveryPasswordSchema,\n      onSubmit: ({firstPassword, secondPassword}) => {\n         //alert(JSON.stringify({firstPassword, secondPassword}, null, 2));\n\n         if (firstPassword !== secondPassword) {\n            dispatch(setAppError('Passwords don\\'t match!'))\n         } else {\n            token && dispatch(recoveryPassword(firstPassword, token));\n         }\n      },\n   });\n\n   if (status === 'succeeded') {\n      return <Redirect to={PATH.SIGN_IN_PATH}/>\n   }\n\n\n   return (\n      <ThemeProvider theme={theme}>\n         <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justify=\"center\"\n               style={{minHeight: '80vh'}}>\n            <Grid item xs={8}>\n\n               <form onSubmit={formik.handleSubmit}>\n                  <FormControl style={{width: '300px'}}>\n                     <FormGroup>\n                        <TextField\n                           label=\"Password\"\n                           type='password'\n                           margin=\"normal\"\n                           color='secondary'\n                           {...formik.getFieldProps('firstPassword')}\n                        />\n                        {formik.touched && formik.errors.firstPassword &&\n                        <div style={{color: 'red'}}>{formik.errors.firstPassword}</div>}\n\n                        <TextField\n                           label=\"Confirm password\"\n                           type='password'\n                           margin=\"normal\"\n                           color='secondary'\n                           {...formik.getFieldProps('secondPassword')}\n                        />\n                        {formik.touched && formik.errors.secondPassword &&\n                        <div style={{color: 'red'}}>{formik.errors.secondPassword}</div>}\n\n                        <Button type={'submit'} variant={'contained'} color={'secondary'} style={{marginTop: '20px'}}>\n                           Recovery password\n                        </Button>\n\n                        <FormLabel>\n                           <Box mt={5}>\n                              <p style={{textAlign: 'center'}}><NavLink to={PATH.SIGN_IN_PATH}>sign in</NavLink></p>\n                           </Box>\n                        </FormLabel>\n                     </FormGroup>\n                  </FormControl>\n               </form>\n            </Grid>\n         </Grid>\n      </ThemeProvider>\n   );\n})","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../app/store';\nimport {setAppError} from '../../app/appReducer';\n\nfunction Alert(props: AlertProps) {\n   return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n   const dispatch = useDispatch();\n   const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\n\n   const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n      if (reason === 'clickaway') {\n         return\n      }\n\n      dispatch(setAppError(null));\n   }\n\n   return (\n      <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\n         <Alert onClose={handleClose} severity=\"error\">\n            {error}\n         </Alert>\n      </Snackbar>\n   )\n}","import React from 'react';\n\nimport {\n   AppBar,\n   Button,\n   createStyles,\n   IconButton,\n   LinearProgress,\n   makeStyles,\n   Theme,\n   Toolbar,\n   Typography\n} from '@material-ui/core';\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport {theme} from '../../utils/theme';\nimport {ErrorSnackbar} from '../../components/ErrorSnackbar/ErrorSnackbar';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../app/store';\nimport {RequestStatusType} from '../../app/appReducer';\nimport {PATH} from '../Routes/Routes';\nimport {logout} from '../SignIn/authReducer';\nimport {NavLink} from 'react-router-dom';\nimport {history} from '../../index';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n   createStyles({\n      root: {\n         flexGrow: 1,\n      },\n      logo: {\n         marginRight: theme.spacing(3),\n      },\n      links: {\n         flexGrow: 1,\n      },\n      navLink: {\n         color: 'white',\n         textDecoration: 'none',\n         paddingLeft: '15px'\n      },\n      selectedLink: {\n         color: '#4caf50   '\n      }\n   }),\n);\n\n\nexport const Header: React.FC = () => {\n   console.log('Header component')\n   const classes = useStyles();\n\n   const dispatch = useDispatch();\n   const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\n\n   const handlerLogin = () => {\n      history.push(PATH.SIGN_IN_PATH);\n   }\n\n   const handleLogout = () => {\n      dispatch(logout());\n   }\n\n   return (\n      <ThemeProvider theme={theme}>\n         <ErrorSnackbar/>\n         <div className={classes.root}>\n            <AppBar position=\"static\" color={'primary'}>\n               <Toolbar>\n                  <IconButton edge=\"start\" className={classes.logo} color=\"inherit\" aria-label=\"logo\">\n                     CARDS\n                  </IconButton>\n                  <Typography variant=\"h6\" className={classes.links}>\n                     <NavLink activeClassName={classes.selectedLink} to={PATH.PROFILE_PATH}\n                              className={classes.navLink}>Profile</NavLink>\n\n                     <NavLink activeClassName={classes.selectedLink} to={'dfdf'}\n                              className={classes.navLink}>News</NavLink>\n                  </Typography>\n                  <Typography variant=\"h6\">\n\n                  </Typography>\n                  {!isLoggedIn && <Button color=\"inherit\" onClick={handlerLogin}>Login</Button>}\n                  {isLoggedIn && <Button color=\"inherit\" onClick={handleLogout}>Logout</Button>}\n               </Toolbar>\n            </AppBar>\n         </div>\n         {status === 'loading' && <LinearProgress/>}\n      </ThemeProvider>\n   );\n};\n\n","import React from 'react';\nimport {Routes} from '../Routes/Routes';\nimport {Header} from '../Header/Header';\n\n\nexport const Main: React.FC = () => {\n   return (\n      <>\n         <Header/>\n\n         <Routes/>\n      </>\n   );\n};","import React, {useEffect} from 'react';\nimport './App.css';\nimport {Main} from '../features/Main/Main';\n\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from './store';\nimport {initializeApp} from './appReducer';\nimport {CircularProgress} from '@material-ui/core';\nimport {theme} from '../utils/theme';\nimport {ThemeProvider} from '@material-ui/core/styles';\n\n\nfunction App() {\n   const dispatch = useDispatch();\n   const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized);\n\n   useEffect(() => {\n      dispatch(initializeApp());\n   }, [dispatch])\n\n   if (!isInitialized) {\n      return (\n         <ThemeProvider theme={theme}>\n            <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n               <CircularProgress color={'primary'}/>\n            </div>\n         </ThemeProvider>\n      );\n   }\n\n   return (\n      <div className=\"App\">\n         <Main/>\n      </div>\n   );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, createStore } from \"redux\";\nimport { combineReducers } from \"redux\";\nimport thunk from 'redux-thunk';\nimport {authReducer} from '../features/SignIn/authReducer';\nimport {appReducer} from './appReducer';\n\nconst rootReducer = combineReducers({\n   app: appReducer,\n   auth: authReducer\n});\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter, Router} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport createHistory from 'history/createBrowserHistory';\n\nexport const history = createHistory();\n\nReactDOM.render(\n   <React.StrictMode>\n      <HashRouter>\n         <Router history={history}>\n            <Provider store={store}>\n               <App/>\n            </Provider>\n         </Router>\n      </HashRouter>\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}