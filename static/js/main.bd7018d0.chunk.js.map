{"version":3,"sources":["features/authorization/a1-SignIn/authReducer.ts","api/apiSettings.ts","api/api.ts","utils/error-utils.ts","app/appReducer.ts","features/PacksList/packsReducer.ts","utils/theme.ts","utils/validators.ts","features/authorization/a1-SignIn/SignIn.tsx","assets/images/avatar-default.png","features/Profile/Profile.tsx","features/Profile/ProfileContainer.tsx","features/authorization/a2-SignUp/SignUp.tsx","features/authorization/a3-ForgotPassword/ForgotPassword.tsx","features/authorization/a4-RecoveryPassword/RecoveryPassword.tsx","features/PacksList/CardsList/cardsReducer.ts","components/useTable/useTable.tsx","components/ActionButton/ActionButton.tsx","features/PacksList/PacksList.tsx","features/main/m3-Routes/Routes.tsx","features/PacksList/CardsList/CardsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/main/m1-Header/Header.tsx","features/main/m2-Main/Main.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["AUTH_ACTIONS_TYPE","instance","axios","create","baseURL","withCredentials","authAPI","data","post","then","response","delete","email","password","from","message","token","packsApi","get","params","pageCount","_id","name","put","cardsPack","path","private","deckCover","type","id","cardsApi","cardsPack_id","handleError","e","dispatch","error","setAppError","setAppStatus","APP_ACTIONS_TYPE","initialState","isLoggedIn","userData","isRegisteredSuccess","setIsLoggedIn","SET_IS_LOGGED_IN","payload","setUserData","SET_USER_DATA","setIsRegisteredSuccess","SET_IS_REGISTERED_SUCCESS","login","a","responseData","register","forgotPassword","recoveryPassword","PACKS_ACTIONS_TYPE","status","isInitialized","SET_STATUS","SET_ERROR","theme","createMuiTheme","palette","primary","main","secondary","SignInSchema","Yup","shape","required","min","SignUpSchema","firstPassword","secondPassword","ForgotPasswordSchema","RecoveryPasswordSchema","SignIn","console","log","useDispatch","useSelector","state","auth","formik","useFormik","initialValues","rememberMe","validationSchema","onSubmit","values","setSubmitting","to","PATH","PACKS_PATH","ThemeProvider","Grid","container","spacing","direction","alignItems","justify","style","minHeight","item","xs","handleSubmit","FormControl","width","FormLabel","FormGroup","TextField","label","defaultValue","margin","color","getFieldProps","touched","errors","FormControlLabel","control","Checkbox","Button","variant","marginTop","disabled","isValid","isSubmitting","Box","mt","REGISTER_PATH","FORGOT_PATH","onClick","Profile","React","memo","userProfileData","borderRadius","height","display","marginLeft","marginRight","src","avatar","defaultPhoto","alt","fontSize","paddingLeft","SIGN_IN_PATH","ProfileContainer","SignUp","useEffect","textAlign","ForgotPassword","props","app","backgroundColor","padding","RecoveryPassword","useParams","CARDS_ACTIONS_TYPE","cardPacks","getCardPacks","SET_PACKS","useStyles","makeStyles","table","fontWeight","light","cursor","useTable","records","headCells","searchFn","classes","pages","useState","page","setPage","rowsPerPage","setRowsPerPage","order","setOrder","orderBy","setOrderBy","handleChangePage","event","newPage","handleChangeRowsPerPage","parseInt","target","value","descendingComparator","b","TblContainer","Table","className","children","TblHead","TableHead","TableRow","map","headCell","TableCell","sortDirection","isDisableSorting","TableSortLabel","cellId","active","TblPaginator","TablePagination","component","rowsPerPageOptions","count","length","onChangePage","onChangeRowsPerPage","recordsAfterPagingAndSorting","array","comparator","stabilizedThis","el","index","sort","stableSort","fn","getComparator","slice","root","minWidth","ActionButton","other","Object","pageContent","searchInput","addButton","position","right","PacksList","items","setSearchFn","packs","editItemHandler","updateCardPack","deleteItemHandler","Paper","Toolbar","onChange","filter","toLowerCase","startsWith","InputProps","startAdornment","InputAdornment","Search","startIcon","TableBody","cardsCount","updated","history","push","CARDS_PATH","handleCardsClick","cards","CardsList","SET_CARDS","Routes","exact","render","PROFILE_PATH","SET_NEW_PASSWORD_PATH","Alert","elevation","ErrorSnackbar","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","createStyles","flexGrow","logo","links","navLink","textDecoration","selectedLink","Header","setIsSubmitting","handleLogout","AppBar","IconButton","edge","aria-label","Typography","activeClassName","LinearProgress","appMain","Main","CssBaseline","App","getState","SET_IS_INITIALIZED","top","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","createHistory","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd7018d0.chunk.js","sourcesContent":["import {authAPI, LoginParamsType, ResponseLoginMeType} from '../../../api/api';\nimport {ThunkAction} from 'redux-thunk';\nimport {AppRootStateType} from '../../../app/store';\nimport {SetAppErrorActionType, setAppStatus, SetAppStatusActionType} from '../../../app/appReducer';\nimport {handleError} from '../../../utils/error-utils';\n\nenum AUTH_ACTIONS_TYPE {\n   SET_IS_LOGGED_IN = 'AUTH/SET-IS-LOGGED-IN',\n   SET_USER_DATA = 'AUTH/SET_USER_DATA',\n   SET_IS_REGISTERED_SUCCESS = 'AUTH/SET_IS_REGISTERED_SUCCESS',\n}\n\nconst initialState = {\n   isLoggedIn: false as boolean,\n   userData: null as null | UserType,\n   isRegisteredSuccess: false as boolean\n}\n\n\nexport const authReducer = (state = initialState, action: AuthActions): AuthInitialStateType => {\n   switch (action.type) {\n      case AUTH_ACTIONS_TYPE.SET_IS_LOGGED_IN:\n      case AUTH_ACTIONS_TYPE.SET_IS_REGISTERED_SUCCESS:\n      case AUTH_ACTIONS_TYPE.SET_USER_DATA: {\n         return {...state, ...action.payload}\n      }\n\n      default:\n         return state\n   }\n}\n\n\n// actions\nexport const setIsLoggedIn = (isLoggedIn: boolean) =>\n   ({type: AUTH_ACTIONS_TYPE.SET_IS_LOGGED_IN, payload: {isLoggedIn}} as const)\n\nexport const setUserData = (userData: UserType) =>\n   ({type: AUTH_ACTIONS_TYPE.SET_USER_DATA, payload: {userData}} as const)\n\nexport const setIsRegisteredSuccess = (isRegisteredSuccess: boolean) =>\n   ({type: AUTH_ACTIONS_TYPE.SET_IS_REGISTERED_SUCCESS, payload: {isRegisteredSuccess}} as const)\n\n\n// thunks\nexport const login = (data: LoginParamsType): ThunkAction<Return, AppRootStateType, ExtraArgument, AuthActions> =>\n   async (dispatch) => {\n      try {\n         dispatch(setAppStatus('loading'));\n\n         const responseData = await authAPI.login(data);\n\n         dispatch(setUserData(responseData));\n         dispatch(setIsLoggedIn(true));\n         dispatch(setAppStatus('succeeded'));\n      } catch (e) {\n         handleError(e, dispatch);\n      }\n   }\n\nexport const logout = (): ThunkAction<Return, AppRootStateType, ExtraArgument, AuthActions> =>\n   async (dispatch) => {\n      try {\n         dispatch(setAppStatus('loading'));\n\n         const data = await authAPI.logout();\n\n         dispatch(setIsLoggedIn(false));\n         dispatch(setAppStatus('succeeded'));\n      } catch (e) {\n         handleError(e, dispatch);\n      }\n   }\n\nexport const register = (email: string, password: string): ThunkAction<Return, AppRootStateType, ExtraArgument, AuthActions> =>\n   async (dispatch) => {\n      try {\n         dispatch(setAppStatus('loading'));\n\n         const data = await authAPI.register(email, password);\n\n         dispatch(setIsRegisteredSuccess(true));\n         dispatch(setAppStatus('succeeded'));\n      } catch (e) {\n         handleError(e, dispatch);\n      }\n   }\n\nexport const forgotPassword = (email: string): ThunkAction<Return, AppRootStateType, ExtraArgument, AuthActions> =>\n   async (dispatch) => {\n      try {\n         dispatch(setAppStatus('loading'));\n\n         const data = await authAPI.forgotPassword(email);\n\n         dispatch(setAppStatus('succeeded'));\n      } catch (e) {\n         handleError(e, dispatch);\n      }\n   }\n\nexport const recoveryPassword = (password: string, token: string): ThunkAction<Return, AppRootStateType, ExtraArgument, AuthActions> =>\n   async (dispatch) => {\n      try {\n         dispatch(setAppStatus('loading'));\n\n         const data = await authAPI.recoveryPassword(password, token);\n\n         dispatch(setAppStatus('succeeded'));\n      } catch (e) {\n         handleError(e, dispatch);\n      }\n   }\n\n// types\ntype Return = void;\ntype ExtraArgument = {};\ntype IGetState = () => AppRootStateType;\n\nexport type UserType = ResponseLoginMeType;\n\nexport type AuthInitialStateType = typeof initialState\nexport type SetIsLoggedInActionType = ReturnType<typeof setIsLoggedIn>;\nexport type SetUserDataActionType = ReturnType<typeof setUserData>;\n\ntype AuthActions =\n   | SetIsLoggedInActionType\n   | SetUserDataActionType\n   | ReturnType<typeof setIsRegisteredSuccess>\n   | SetAppStatusActionType\n   | SetAppErrorActionType\n","import axios from 'axios';\n\nexport const settings = {\n   withCredentials: true,\n}\n\nexport let instance = axios.create({\n   baseURL: 'https://neko-back.herokuapp.com/2.0/',\n   // baseURL: 'http://localhost:7542/2.0/',\n   ...settings\n})","import {instance} from './apiSettings';\nimport {insert} from 'formik';\n\nexport interface ISignInData {\n\n}\n\n\nexport const authAPI = {\n   login(data: LoginParamsType) {\n      return instance.post<ResponseLoginMeType>('auth/login', data)\n         .then(response => response.data);\n   },\n   logout() {\n      return instance.delete<ResponseLoginMeType>('auth/me')\n         .then(response => response.data);\n   },\n   register(email: string, password: string) {\n      return instance.post<ResponseRegisterType>('auth/register', {email, password})\n         .then(response => response.data);\n   },\n   forgotPassword: (email: string) => {\n      return instance.post<ResponseForgotPasswordType>('/auth/forgot', {\n         email,\n         from: 'front-admin <serhioromanchuk@gmail.com>',\n         message: `<div style=\"background-color: lime; padding: 15px\">\t\n\t                         password recovery link: \t\t\n                            <a href='https://borec22.github.io/cards/#/set-new-password/$token$'>link</a>\n                            <!--<a href='http://localhost:3000/set-new-password/$token$'>link</a>-->\n\t                      </div>`\n\n      })\n         .then(response => response.data);\n   },\n   recoveryPassword(password: string, token: string) {\n      return instance.post<ResponseRecoveryPasswordType>(`auth/set-new-password`, {\n         'password': password,\n         'resetPasswordToken': token\n      })\n         .then(response => response.data)\n   },\n   me() {\n      return instance.post<ResponseLoginMeType>('auth/me')\n         .then(response => response.data);\n   }\n}\nexport const packsApi = {\n   getPacks() {\n      return instance.get<ResponseGetPacksType>('cards/pack', {\n         params: {\n            pageCount: 26\n         }\n      })\n         .then(response => response.data);\n   },\n   updatePack(_id: string, name: string) {\n      return instance.put<ResponseUpdatePackType>('cards/pack', {\n         cardsPack: {\n            _id,\n            name\n         }\n      })\n         .then(response => response.data);\n   },\n   createPack() {\n      return instance.post<ResponseCreatePackType>('cards/pack', {\n         cardsPack: {\n            name: 'new pack added',\n            path: '',\n            private: false,\n            deckCover: '',\n            type: 'pack'\n         }\n      })\n         .then(response => response.data);\n   },\n   deletePack(id: string) {\n      return instance.delete<ResponseDeletePackType>('cards/pack', {\n         params: {id}\n      })\n   }\n}\nexport const cardsApi = {\n   getCards(cardsPack_id: string) {\n      return instance.get<ResponseGetCardsType>('cards/card', {\n         params: {\n            cardsPack_id\n         }\n      })\n         .then(response => response.data);\n   },\n   createCard(model: CreateApiCardModelType) {\n      return instance.post<ResponseCreateCardType>('cards/card', {\n         card: {...model}\n      })\n         .then(response => response.data);\n   },\n   deleteCard(id: string) {\n      return instance.delete<ResponseDeleteCardType>('cards/card', {\n         params: {id}\n      })\n         .then(response => response.data);\n   },\n   updateCard(model: UpdateApiCardModelType) {\n      return instance.put<ResponseUpdateCardType>('cards/card', {\n         card: {...model}\n      })\n         .then(response => response.data);\n   }\n}\n\n\n// types\n// cards_type\nexport type CardType = {\n   answer: string\n   cardsPack_id: string\n   comments: string\n   created: string\n   grade: number\n   more_id: string\n   question: string\n   questionImg: string\n   rating: number\n   shots: number\n   type: string\n   updated: string\n   user_id: string\n   __v: number\n   _id: string\n}\ntype ResponseGetCardsType = {\n   cards: CardType[],\n   cardsTotalCount: number\n   maxGrade: number\n   minGrade: number\n   packUserId: string\n   page: number\n   pageCount: number\n   token: string\n   tokenDeathTime: number\n}\ntype ResponseCreateCardType = {\n   newCard: {}\n}\ntype CreateApiCardModelType = {\n   cardsPack_id: string\n   question?: string\n   answer?: string\n   grade?: number\n   shots?: number\n   rating?: number\n   answerImg?: string\n   questionImg?: string\n   questionVideo?: string\n   answerVideo?: string\n   type?: string\n}\ntype ResponseDeleteCardType = { deletedCard: {} }\ntype UpdateApiCardModelType = {\n   _id: string\n   question?: string\n   answer?: string\n   grade?: number\n   shots?: number\n   rating?: number\n   answerImg?: string\n   questionImg?: string\n   questionVideo?: string\n   answerVideo?: string\n   type?: string\n}\ntype ResponseUpdateCardType = { updatedCard: {} }\n\n// packs_types\nexport type PackType = {\n   cardsCount: number\n   created: string\n   grade: number\n   deckCover: string\n   more_id: string\n   name: string\n   path: string\n   rating: number\n   shots: number\n   type: string\n   updated: string\n   user_id: string\n   user_name: string\n   __v: number\n   _id: string\n}\ntype ResponseGetPacksType = {\n   cardPacks: PackType[],\n   cardPacksTotalCount: number\n   maxCardsCount: number\n   minCardsCount: number\n   page: number\n   pageCount: number\n   token: string\n   tokenDeathTime: number\n\n}\ntype ResponseUpdatePackType = {\n   updatedCardsPack: {}\n}\ntype ResponseCreatePackType = {\n   newCardsPack: {}\n}\ntype ResponseDeletePackType = {\n   deletedCardsPack: {}\n}\n\n// auth_types\ntype ResponseRecoveryPasswordType = {\n   'error': string\n   'method': string\n   'url': string\n   'query': Object\n   'body': {\n      'password': string\n      'resetPasswordToken': string\n   }\n}\ntype ResponseForgotPasswordType = {\n   info: string,\n   success: boolean,\n   answer: boolean,\n   html: boolean\n}\nexport type LoginParamsType = {\n   email: string,\n   password: string,\n   rememberMe: boolean\n}\nexport type ResponseLoginMeType = {\n   '_id': string,\n   'email': string,\n   'rememberMe': boolean,\n   'isAdmin': boolean,\n   'name': string,\n   'verified': boolean,\n   'publicCardPacksCount': number,\n   'created': string,\n   'updated': string,\n   '__v': number,\n   'token': string,\n   'tokenDeathTime': number\n   avatar: string;\n}\ntype ResponseRegisterType = {\n   'addedUser': {\n      '_id': string,\n      'email': string,\n      'rememberMe': boolean,\n      'isAdmin': boolean,\n      'name': string,\n      'verified': boolean,\n      'publicCardPacksCount': number,\n      'created': string,\n      'updated': string,\n      '__v': number\n   }\n}\n","import {Dispatch} from 'redux';\nimport {setAppError, SetAppErrorActionType, setAppStatus, SetAppStatusActionType} from '../app/appReducer';\n\nexport const handleError = (e: ErrorType, dispatch: ErrorUtilsDispatchType) => {\n   const error = e.response\n      ? e.response.data.error\n      : (e.message);\n\n   dispatch(setAppError(error));\n   dispatch(setAppStatus('failed'));\n}\n\n\n// types\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>\ntype ErrorType = {\n   message: string,\n   response: {\n      data: {\n         error: string\n      }\n   }\n}","import {Dispatch} from 'redux';\nimport {authAPI} from '../api/api';\nimport {handleError} from '../utils/error-utils';\nimport {ThunkAction} from 'redux-thunk';\nimport {AppRootStateType} from './store';\nimport {\n   setIsLoggedIn,\n   SetIsLoggedInActionType,\n   setUserData,\n   SetUserDataActionType\n} from '../features/authorization/a1-SignIn/authReducer';\n\nenum APP_ACTIONS_TYPE {\n   SET_STATUS = 'APP/SET-STATUS',\n   SET_ERROR = 'APP/SET-ERROR',\n   SET_IS_INITIALIZED = 'APP/SET_IS_INITIALIZED',\n}\n\nconst initialState = {\n   status: 'idle' as RequestStatusType,\n   error: null as string | null,\n   isInitialized: false\n}\n\n\nexport const appReducer = (state = initialState, action: AppActions): InitialStateType => {\n   switch (action.type) {\n      case APP_ACTIONS_TYPE.SET_STATUS:\n         return {...state, status: action.status}\n\n      case APP_ACTIONS_TYPE.SET_ERROR: {\n         return {...state, error: action.error}\n      }\n\n      case APP_ACTIONS_TYPE.SET_IS_INITIALIZED: {\n         return {...state, isInitialized: action.isInitialized}\n      }\n\n      default:\n         return state\n   }\n}\n\n\n// actions\nexport const setAppStatus = (status: RequestStatusType) =>\n   ({type: APP_ACTIONS_TYPE.SET_STATUS, status} as const);\n\nexport const setAppError = (error: null | string) =>\n   ({type: APP_ACTIONS_TYPE.SET_ERROR, error} as const);\n\nexport const setIsInitialized = (isInitialized: boolean) =>\n   ({type: APP_ACTIONS_TYPE.SET_IS_INITIALIZED, isInitialized} as const);\n\n\n// thunks\nexport const initializeApp = (): ThunkAction<Return, AppRootStateType, ExtraArgument, AppActions> =>\n   async (dispatch, getState) => {\n      try {\n         dispatch(setAppStatus('loading'));\n\n         const data = await authAPI.me();\n         const userProfileData = getState().auth.userData;\n\n         if (!userProfileData) {\n            dispatch(setUserData(data));\n         }\n\n         dispatch(setIsLoggedIn(true));\n         dispatch(setAppStatus('succeeded'));\n\n      } catch (e) {\n         handleError(e, dispatch);\n      } finally {\n         dispatch(setIsInitialized(true));\n      }\n   }\n\n\n// types\ntype Return = void;\ntype ExtraArgument = {};\ntype IGetState = () => AppRootStateType;\n\nexport type InitialStateType = typeof initialState\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\n\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatus>;\nexport type SetAppErrorActionType = ReturnType<typeof setAppError>;\n\ntype AppActions =\n   | SetAppStatusActionType\n   | SetAppErrorActionType\n   | ReturnType<typeof setIsInitialized>\n   | SetIsLoggedInActionType\n   | SetUserDataActionType","import {AppRootStateType} from '../../app/store';\nimport {packsApi, PackType} from '../../api/api';\nimport {ThunkAction} from 'redux-thunk';\nimport {SetAppErrorActionType, setAppStatus, SetAppStatusActionType} from '../../app/appReducer';\nimport {handleError} from '../../utils/error-utils';\n\n\nenum PACKS_ACTIONS_TYPE {\n   SET_PACKS = 'PACKS/SET-PACKS',\n}\n\nconst initialState = {\n   cardPacks: [] as PackType[]\n}\n\n\nexport const packsReducer = (state = initialState, action: PacksActions): PacksInitialStateType => {\n   switch (action.type) {\n      case PACKS_ACTIONS_TYPE.SET_PACKS: {\n         return {...state, ...action.payload}\n      }\n\n      default:\n         return state\n   }\n}\n\n\n// actions\nexport const setPacks = (cardPacks: PackType[]) =>\n   ({type: PACKS_ACTIONS_TYPE.SET_PACKS, payload: {cardPacks}} as const)\n\n\n// thunks\nexport const getCardPacks = (): ThunkAction<Return, AppRootStateType, ExtraArgument, PacksActions> =>\n   async (dispatch) => {\n      try {\n         dispatch(setAppStatus('loading'));\n\n         const data = await packsApi.getPacks();\n\n         dispatch(setPacks(data.cardPacks));\n         dispatch(setAppStatus('succeeded'));\n      } catch (e) {\n         handleError(e, dispatch);\n      }\n   }\n\nexport const addCardPack = (): ThunkAction<Return, AppRootStateType, ExtraArgument, PacksActions> =>\n   async (dispatch) => {\n      try {\n         dispatch(setAppStatus('loading'));\n\n         const data = await packsApi.createPack();\n\n         dispatch(getCardPacks());\n         dispatch(setAppStatus('succeeded'));\n      } catch (e) {\n         handleError(e, dispatch);\n      }\n   }\n\nexport const updateCardPack = (id: string, name: string = 'update pack'): ThunkAction<Return, AppRootStateType, ExtraArgument, PacksActions> =>\n   async (dispatch) => {\n      try {\n         dispatch(setAppStatus('loading'));\n\n         const data = await packsApi.updatePack(id, name);\n\n         dispatch(getCardPacks());\n         dispatch(setAppStatus('succeeded'));\n      } catch (e) {\n         handleError(e, dispatch);\n      }\n   }\n\nexport const deleteCardPack = (id: string): ThunkAction<Return, AppRootStateType, ExtraArgument, PacksActions> =>\n   async (dispatch) => {\n      try {\n         dispatch(setAppStatus('loading'));\n\n         const data = await packsApi.deletePack(id);\n\n         dispatch(getCardPacks());\n         dispatch(setAppStatus('succeeded'));\n      } catch (e) {\n         handleError(e, dispatch);\n      }\n   }\n\n\n// types\ntype Return = void;\ntype ExtraArgument = {};\ntype IGetState = () => AppRootStateType;\n\nexport type PacksInitialStateType = typeof initialState\n\ntype PacksActions =\n   | ReturnType<typeof setPacks>\n   | SetAppStatusActionType\n   | SetAppErrorActionType\n\n\n","import {createMuiTheme} from '@material-ui/core';\n\nexport const theme = createMuiTheme({\n   palette: {\n      primary: {\n         main: '#00695f'\n      },\n      secondary: {\n         main: '#009688'\n      },\n   },\n});","import * as Yup from 'yup';\n\nexport const SignInSchema = Yup.object().shape({\n   email: Yup.string().email('Invalid email address').required('Required'),\n   password: Yup.string()\n      .min(7, 'Password must be more than 7 characters')\n      .required('Required')\n});\n\nexport const SignUpSchema = Yup.object().shape({\n   email: Yup.string().email('Invalid email address').required('Required'),\n   firstPassword: Yup.string()\n      .min(7, 'Password must be more than 7 characters')\n      .required('Required'),\n   secondPassword: Yup.string()\n      .min(7, 'Password must be more than 7 characters')\n      .required('Required')\n});\n\nexport const ForgotPasswordSchema = Yup.object().shape({\n   email: Yup.string().email('Invalid email address').required('Required')\n});\n\nexport const RecoveryPasswordSchema = Yup.object().shape({\n   firstPassword: Yup.string()\n      .min(7, 'Password must be more than 7 characters')\n      .required('Required'),\n   secondPassword: Yup.string()\n      .min(7, 'Password must be more than 7 characters')\n      .required('Required')\n});","import {Box, Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core';\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport React from 'react';\nimport {theme} from '../../../utils/theme';\nimport {useFormik} from 'formik';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {login} from './authReducer';\nimport {AppRootStateType} from '../../../app/store';\nimport {NavLink, Redirect} from 'react-router-dom';\nimport {PATH} from '../../main/m3-Routes/Routes';\nimport {SignInSchema} from '../../../utils/validators';\nimport {setAppStatus} from '../../../app/appReducer';\n\ntype FormikLoginErrorType = {\n   email?: string\n   password?: string\n}\n\nexport const SignIn = () => {\n   console.log('render a1-SignIn component');\n   const dispatch = useDispatch();\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\n\n   const formik = useFormik({\n      initialValues: {\n         email: '',\n         password: '',\n         rememberMe: false\n      },\n      validationSchema: SignInSchema,\n      onSubmit: async (values, {setSubmitting}) => {\n         await dispatch(login(values));\n         setSubmitting(false);\n      },\n   });\n\n   if (isLoggedIn) {\n      return <Redirect to={PATH.PACKS_PATH}/>\n   }\n\n   return (\n      <ThemeProvider theme={theme}>\n         <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justify=\"center\"\n               style={{minHeight: '80vh'}}>\n            <Grid item xs={4}>\n               <form onSubmit={formik.handleSubmit}>\n                  <FormControl style={{width: '300px'}}>\n                     <FormLabel>\n                        <p>Use common test account credentials:</p>\n                        <p>Email: nya-admin@nya.nya</p>\n                        <p>Password: 1qazxcvBG</p>\n                     </FormLabel>\n                     <FormGroup>\n                        <TextField\n                           label=\"Email\"\n                           defaultValue={'nya-admin@nya.nya'}\n                           margin=\"normal\"\n                           color='secondary'\n                           {...formik.getFieldProps('email')}\n                        />\n                        {formik.touched && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\n\n                        <TextField\n                           type=\"password\"\n                           label=\"Password\"\n                           defaultValue={'1qazxcvBG'}\n                           margin=\"normal\"\n                           color={'secondary'}\n                           {...formik.getFieldProps('password')}\n                        />\n                        {formik.touched && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\n\n                        <FormControlLabel\n                           label={'Remember me'}\n                           control={<Checkbox color={'secondary'} {...formik.getFieldProps('rememberMe')}/>}\n                        />\n                        <Button type={'submit'}\n                                variant={'contained'}\n                                color={'secondary'}\n                                style={{marginTop: '20px'}}\n                                disabled={!formik.isValid || formik.isSubmitting}>\n                           Sign In\n                        </Button>\n\n                        <FormLabel style={{marginTop: '20'}}>\n                           <Box mt={5}>\n                              <p>Doesn't have a account? <NavLink to={PATH.REGISTER_PATH}>sign up</NavLink></p>\n                              <p>\n                                 Forgot <NavLink to={PATH.FORGOT_PATH} onClick={() => {\n                                    dispatch(setAppStatus('idle'));\n                              }}> password? </NavLink>\n                              </p>\n                           </Box>\n                        </FormLabel>\n                     </FormGroup>\n                  </FormControl>\n               </form>\n            </Grid>\n         </Grid>\n      </ThemeProvider>\n   );\n}","export default __webpack_public_path__ + \"static/media/avatar-default.04fa9609.png\";","import {Redirect} from 'react-router-dom';\nimport {PATH} from '../main/m3-Routes/Routes';\nimport {Box, Grid} from '@material-ui/core';\nimport React from 'react';\nimport {UserType} from '../authorization/a1-SignIn/authReducer';\nimport defaultPhoto from '../../assets/images/avatar-default.png';\n\ntype PropsType = {\n   userProfileData: UserType | null\n   isLoggedIn: boolean\n}\n\nexport const Profile: React.FC<PropsType> = React.memo((\n   {\n      userProfileData, isLoggedIn\n   }\n) => {\n   console.log('render Profile component');\n\n\n   if (!isLoggedIn) {\n      return <Redirect to={PATH.SIGN_IN_PATH}/>\n   }\n\n   return (\n      <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justify=\"center\"\n            style={{minHeight: '80vh'}}>\n         <Grid item xs={8}>\n            {userProfileData && <>\n                <img style={{\n                   borderRadius: '50%', height: 300, width: 300, display: 'block',\n                   marginLeft: 'auto',\n                   marginRight: 'auto',\n                }}\n                     src={userProfileData.avatar ? userProfileData.avatar : defaultPhoto} alt=\"\"/>\n                <Box mt={4} fontSize={'25px'}>\n                    <strong>username:</strong>\n                    <span style={{paddingLeft: '20'}}>  {userProfileData.name} </span>\n                </Box>\n            </>}\n         </Grid>\n      </Grid>\n   );\n});","import {SignIn} from '../authorization/a1-SignIn/SignIn';\nimport {Profile} from './Profile';\nimport {useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../app/store';\nimport {AuthInitialStateType, UserType} from '../authorization/a1-SignIn/authReducer';\n\nexport const ProfileContainer = () => {\n   const {\n      userData,\n      isLoggedIn\n   } = useSelector<AppRootStateType, AuthInitialStateType>(state => state.auth);\n\n   return (\n      <Profile userProfileData={userData} isLoggedIn={isLoggedIn}/>\n   );\n}","import {theme} from '../../../utils/theme';\nimport {Box, Button, FormControl, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core';\nimport {NavLink, Redirect} from 'react-router-dom';\nimport {PATH} from '../../main/m3-Routes/Routes';\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport React, {useEffect} from 'react';\nimport {useFormik} from 'formik';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {SignUpSchema} from '../../../utils/validators';\nimport {setAppError} from '../../../app/appReducer';\nimport {AppRootStateType} from '../../../app/store';\nimport {register, setIsRegisteredSuccess} from '../a1-SignIn/authReducer';\n\nexport const SignUp = () => {\n   const dispatch = useDispatch();\n   const isRegisteredSuccess = useSelector<AppRootStateType, boolean>(state => state.auth.isRegisteredSuccess);\n\n   useEffect(() => {\n      return () => {\n         dispatch(setIsRegisteredSuccess(false));\n      }\n   })\n\n   const formik = useFormik({\n      initialValues: {\n         email: '',\n         firstPassword: '',\n         secondPassword: ''\n      },\n      validationSchema: SignUpSchema,\n      onSubmit: async (values, {setSubmitting}) => {\n         if (values.firstPassword !== values.secondPassword) {\n            dispatch(setAppError('Passwords don\\'t match!'))\n         } else {\n            // alert(JSON.stringify(values, null, 2));\n            await dispatch(register(values.email, values.firstPassword));\n            setSubmitting(false);\n         }\n      },\n   });\n\n   if (isRegisteredSuccess) {\n      return <Redirect to={PATH.SIGN_IN_PATH}/>\n   }\n\n   return (\n      <ThemeProvider theme={theme}>\n         <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justify=\"center\"\n               style={{minHeight: '80vh'}}>\n            <Grid item xs={4}>\n               <form onSubmit={formik.handleSubmit}>\n                  <FormControl style={{width: '300px'}}>\n                     <FormGroup>\n                        <TextField\n                           label=\"Email\"\n                           margin=\"normal\"\n                           color='secondary'\n                           {...formik.getFieldProps('email')}\n                        />\n                        {formik.touched && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\n\n                        <TextField\n                           type=\"password\"\n                           label=\"Password\"\n                           margin=\"normal\"\n                           color={'secondary'}\n                           {...formik.getFieldProps('firstPassword')}\n                        />\n                        {formik.touched && formik.errors.firstPassword && <div style={{color: 'red'}}>{formik.errors.firstPassword}</div>}\n\n                        <TextField\n                           type=\"password\"\n                           label=\"Confirm password\"\n                           margin=\"normal\"\n                           color={'secondary'}\n                           {...formik.getFieldProps('secondPassword')}\n                        />\n                        {formik.touched.secondPassword && formik.errors.secondPassword && <div style={{color: 'red'}}>{formik.errors.secondPassword}</div>}\n\n                        <Button type={'submit'}\n                                variant={'contained'}\n                                color={'secondary'}\n                                style={{marginTop: '20px'}}\n                                disabled={!formik.isValid || formik.isSubmitting}>\n                           Sign Up\n                        </Button>\n\n                        <FormLabel >\n                           <Box mt={5}>\n                              <p style={{textAlign: 'center'}}><NavLink to={PATH.SIGN_IN_PATH}>sign in</NavLink></p>\n                           </Box>\n                        </FormLabel>\n                     </FormGroup>\n                  </FormControl>\n               </form>\n            </Grid>\n         </Grid>\n      </ThemeProvider>\n   );\n}","import {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../../app/store';\nimport React, {useEffect} from 'react';\nimport {forgotPassword, register, setIsRegisteredSuccess} from '../a1-SignIn/authReducer';\nimport {useFormik} from 'formik';\nimport {ForgotPasswordSchema, SignUpSchema} from '../../../utils/validators';\nimport {RequestStatusType, setAppError, setAppStatus} from '../../../app/appReducer';\nimport {NavLink, Redirect} from 'react-router-dom';\nimport {PATH} from '../../main/m3-Routes/Routes';\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport {theme} from '../../../utils/theme';\nimport {Box, Button, FormControl, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core';\n\ntype PropsType = {}\n\nexport const ForgotPassword: React.FC<PropsType> = React.memo((props) => {\n   console.log('render forgot password')\n   const dispatch = useDispatch();\n   const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\n\n   const formik = useFormik({\n      initialValues: {\n         email: '',\n      },\n      validationSchema: ForgotPasswordSchema,\n      onSubmit: async (values, {setSubmitting}) => {\n         await dispatch(forgotPassword(values.email));\n         setSubmitting(false);\n      },\n   });\n\n\n   return (\n      <ThemeProvider theme={theme}>\n         <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justify=\"center\"\n               style={{minHeight: '80vh'}}>\n            <Grid item xs={8}>\n               {status === 'succeeded' ? (\n                  <div style={{backgroundColor: '#d3efe0', padding: '20px', fontSize: '1.5em'}}>\n                     <h1>Check your email</h1>\n                     <p>We've sent on email to the address provided. Click the link in the email to reset your password.</p>\n                     <p>If you don't see the email, check other places it might be; kike your spam, social, or other folders</p>\n                  </div>\n               ) : (\n                  <form onSubmit={formik.handleSubmit}>\n                     <FormControl style={{width: '300px'}}>\n                        <FormGroup>\n                           <TextField\n                              label=\"Email\"\n                              margin=\"normal\"\n                              color='secondary'\n                              {...formik.getFieldProps('email')}\n                           />\n                           {formik.touched && formik.errors.email &&\n                           <div style={{color: 'red'}}>{formik.errors.email}</div>}\n\n                           <Button type={'submit'}\n                                   variant={'contained'}\n                                   color={'secondary'}\n                                   style={{marginTop: '20px'}}\n                                   disabled={!formik.isValid || formik.isSubmitting}>\n                              Send\n                           </Button>\n\n                           <FormLabel>\n                              <Box mt={5}>\n                                 <p style={{textAlign: 'center'}}><NavLink to={PATH.SIGN_IN_PATH}>sign in</NavLink></p>\n                              </Box>\n                           </FormLabel>\n                        </FormGroup>\n                     </FormControl>\n                  </form>\n               )}\n            </Grid>\n         </Grid>\n      </ThemeProvider>\n   );\n})","import React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../../app/store';\nimport {RequestStatusType, setAppError} from '../../../app/appReducer';\nimport {useFormik} from 'formik';\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport {theme} from '../../../utils/theme';\nimport {Box, Button, FormControl, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core';\nimport {NavLink, Redirect, useParams} from 'react-router-dom';\nimport {PATH} from '../../main/m3-Routes/Routes';\nimport {RecoveryPasswordSchema} from '../../../utils/validators';\nimport {recoveryPassword, register} from '../a1-SignIn/authReducer';\n\n\ntype PropsType = {}\n\nexport const RecoveryPassword: React.FC<PropsType> = React.memo((props) => {\n   console.log('render recovery password')\n   const dispatch = useDispatch();\n   const { token } = useParams<{token?: string}>();\n   const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\n\n\n   const formik = useFormik({\n      initialValues: {\n         firstPassword: '',\n         secondPassword: '',\n      },\n      validationSchema: RecoveryPasswordSchema,\n      onSubmit: async (values, {setSubmitting}) => {\n         const {firstPassword, secondPassword} = values;\n\n         if (firstPassword !== secondPassword) {\n            dispatch(setAppError('Passwords don\\'t match!'))\n         } else {\n            token && await dispatch(recoveryPassword(firstPassword, token));\n            setSubmitting(false);\n         }\n      },\n   });\n\n   if (status === 'succeeded') {\n      return <Redirect to={PATH.SIGN_IN_PATH}/>\n   }\n\n\n   return (\n      <ThemeProvider theme={theme}>\n         <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justify=\"center\"\n               style={{minHeight: '80vh'}}>\n            <Grid item xs={8}>\n\n               <form onSubmit={formik.handleSubmit}>\n                  <FormControl style={{width: '300px'}}>\n                     <FormGroup>\n                        <TextField\n                           label=\"Password\"\n                           type='password'\n                           margin=\"normal\"\n                           color='secondary'\n                           {...formik.getFieldProps('firstPassword')}\n                        />\n                        {formik.touched && formik.errors.firstPassword &&\n                        <div style={{color: 'red'}}>{formik.errors.firstPassword}</div>}\n\n                        <TextField\n                           label=\"Confirm password\"\n                           type='password'\n                           margin=\"normal\"\n                           color='secondary'\n                           {...formik.getFieldProps('secondPassword')}\n                        />\n                        {formik.touched && formik.errors.secondPassword &&\n                        <div style={{color: 'red'}}>{formik.errors.secondPassword}</div>}\n\n                        <Button type={'submit'}\n                                variant={'contained'}\n                                color={'secondary'}\n                                style={{marginTop: '20px'}}\n                                disabled={!formik.isValid || formik.isSubmitting}>\n                           Recovery password\n                        </Button>\n\n                        <FormLabel>\n                           <Box mt={5}>\n                              <p style={{textAlign: 'center'}}><NavLink to={PATH.SIGN_IN_PATH}>sign in</NavLink></p>\n                           </Box>\n                        </FormLabel>\n                     </FormGroup>\n                  </FormControl>\n               </form>\n            </Grid>\n         </Grid>\n      </ThemeProvider>\n   );\n})","import {AppRootStateType} from '../../../app/store';\nimport {cardsApi, CardType} from '../../../api/api';\nimport {ThunkAction} from 'redux-thunk';\nimport {SetAppErrorActionType, setAppStatus, SetAppStatusActionType} from '../../../app/appReducer';\nimport {handleError} from '../../../utils/error-utils';\n\n\nenum CARDS_ACTIONS_TYPE {\n   SET_CARDS = 'CARDS/SET-CARDS',\n}\n\nconst initialState = {\n   cards: [] as CardType[]\n}\n\n\nexport const cardsReducer = (state = initialState, action: CardsActions): CardsInitialStateType => {\n   switch (action.type) {\n      case CARDS_ACTIONS_TYPE.SET_CARDS: {\n         return {...state, ...action.payload}\n      }\n\n      default:\n         return state\n   }\n}\n\n\n// actions\nexport const setCards = (cards: CardType[]) =>\n   ({type: CARDS_ACTIONS_TYPE.SET_CARDS, payload: {cards}} as const)\n\n\n// thunks\nexport const getCards = (cardsPack_id: string): ThunkAction<Return, AppRootStateType, ExtraArgument, CardsActions> =>\n   async (dispatch) => {\n      try {\n         dispatch(setAppStatus('loading'));\n\n         const data = await cardsApi.getCards(cardsPack_id);\n\n         dispatch(setCards(data.cards));\n         dispatch(setAppStatus('succeeded'));\n      } catch (e) {\n         handleError(e, dispatch);\n      }\n   }\n\n\n// types\ntype Return = void;\ntype ExtraArgument = {};\ntype IGetState = () => AppRootStateType;\n\nexport type CardsInitialStateType = typeof initialState\n\ntype CardsActions =\n   | ReturnType<typeof setCards>\n   | SetAppStatusActionType\n   | SetAppErrorActionType\n\n\n","import React, {useState} from 'react';\nimport {makeStyles, Table, TableCell, TableHead, TablePagination, TableRow, TableSortLabel} from '@material-ui/core';\nimport {CardType, PackType} from '../../api/api';\nimport {HeadCell} from '../../features/PacksList/PacksList';\n\nconst useStyles = makeStyles(theme => ({\n   table: {\n      marginTop: theme.spacing(3),\n      '& thead th': {\n         fontWeight: '600',\n         color: '#fff',\n         backgroundColor: theme.palette.primary.light,\n      },\n      '& tbody td': {\n         fontWeight: '300',\n      },\n      '& tbody tr:hover': {\n         // backgroundColor: '#fffbf2',\n         backgroundColor: '#e8f5e9',\n         cursor: 'pointer',\n      },\n   },\n}))\n\ntype SearchFn = {\n   fn: (items: PackType[]) =>  PackType[]\n}\n\nexport const useTable = (\n   records: PackType[],\n   headCells: HeadCell[],\n   searchFn: SearchFn\n) => {\n   const classes = useStyles();\n\n   const pages = [5, 10, 25];\n   const [page, setPage] = useState(0);\n   const [rowsPerPage, setRowsPerPage] = useState(pages[page]);\n   const [order, setOrder] = useState<Order>('asc');\n   const [orderBy, setOrderBy] = useState<string>('cardsCount');\n\n   const TblContainer = (props: { children: React.ReactNode }) => (\n      <Table className={classes.table}>\n         {props.children}\n      </Table>\n   );\n\n   const handleSortRequest = (cellId: string) => {\n      const isAsc = orderBy === cellId && order === 'asc';\n      setOrder(isAsc ? 'desc' : 'asc');\n      setOrderBy(cellId)\n   }\n\n   const TblHead = () => (\n      <TableHead>\n         <TableRow>\n            {\n               headCells.map(headCell => (\n                  <TableCell key={headCell.id}\n                             sortDirection={orderBy === headCell.id ? order : false}>\n                     {headCell.isDisableSorting ? headCell.label :\n                        <TableSortLabel\n                           onClick={() => handleSortRequest(headCell.id)}\n                           direction={orderBy === headCell.id ? order : 'asc'}\n                           active={orderBy === headCell.id}\n                        >\n                           {headCell.label}\n                        </TableSortLabel>}\n                  </TableCell>)\n               )\n            }\n         </TableRow>\n      </TableHead>\n   );\n\n   const handleChangePage = (event: unknown, newPage: number) => {\n      setPage(newPage);\n   }\n   const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n      setRowsPerPage(parseInt(event.target.value, 10));\n      setPage(0);\n   }\n\n\n   function descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n      if (b[orderBy] < a[orderBy]) {\n         return -1;\n      }\n      if (b[orderBy] > a[orderBy]) {\n         return 1;\n      }\n      return 0;\n   }\n\n   type Order = 'asc' | 'desc';\n\n   function getComparator<Key extends keyof any>(\n      order: Order,\n      orderBy: Key,\n   ): (a: { [key in Key]: number | string }, b: { [key in Key]: number | string }) => number {\n      return order === 'desc'\n         ? (a, b) => descendingComparator(a, b, orderBy)\n         : (a, b) => -descendingComparator(a, b, orderBy);\n   }\n\n   function stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\n      const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n      stabilizedThis.sort((a, b) => {\n         const order = comparator(a[0], b[0]);\n         if (order !== 0) return order;\n         return a[1] - b[1];\n      });\n      return stabilizedThis.map((el) => el[0]);\n   }\n\n   const recordsAfterPagingAndSorting = () => {\n      return stableSort(searchFn.fn(records), getComparator(order, orderBy)).slice(page * rowsPerPage, (page + 1) * rowsPerPage);\n   }\n\n   const TblPaginator = () => (<TablePagination\n      component='div'\n      rowsPerPageOptions={pages}\n      count={records.length}\n      rowsPerPage={rowsPerPage}\n      page={page}\n      onChangePage={handleChangePage}\n      onChangeRowsPerPage={handleChangeRowsPerPage}\n   />);\n\n   return {\n      TblContainer,\n      TblHead,\n      TblPaginator,\n      recordsAfterPagingAndSorting\n   }\n}","import React from 'react';\nimport {Button, makeStyles} from '@material-ui/core';\n\ntype ActionButtonProps = {\n   color: string\n   children: React.ReactNode\n   onClick: any\n   disabled?: boolean\n}\n\nconst useStyles = makeStyles(theme => ({\n   root: {\n      minWidth: 0,\n      margin: theme.spacing(0.5)\n   },\n   secondary: {\n      backgroundColor: '#ffcdd2',\n      '& .MuiButton-label': {\n         color: '#d32f2f',\n      }\n   },\n   primary: {\n      backgroundColor: '#e0f2f1',\n      '& .MuiButton-label': {\n         color: '#00796b',\n      }\n   },\n}));\n\nexport const ActionButton: React.FC<ActionButtonProps> = (props) => {\n   const {color, children, onClick, disabled = false, ...other} = props;\n   const classes = useStyles();\n\n   return (\n      <Button\n         className={`${classes.root} ${Object(classes)[color]}`}\n         onClick={onClick}\n         disabled={disabled}\n         {...other}\n      >\n         {children}\n      </Button>\n   );\n}","import {\n   Button,\n   InputAdornment,\n   makeStyles,\n   Paper,\n   TableBody,\n   TableCell,\n   TableRow,\n   TextField,\n   Toolbar\n} from '@material-ui/core';\nimport React, {ChangeEvent, useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../app/store';\nimport {Redirect} from 'react-router-dom';\nimport {PATH} from '../main/m3-Routes/Routes';\nimport {addCardPack, deleteCardPack, getCardPacks, updateCardPack} from './packsReducer';\nimport {useTable} from '../../components/useTable/useTable';\nimport {PackType} from '../../api/api';\nimport {Search} from '@material-ui/icons';\nimport AddIcon from '@material-ui/icons/Add'\nimport {ActionButton} from '../../components/ActionButton/ActionButton';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport CloseIcon from '@material-ui/icons/Close';\nimport {RequestStatusType} from '../../app/appReducer';\nimport {history} from '../../index';\n\n\nconst useStyles = makeStyles(theme => ({\n   pageContent: {\n      margin: theme.spacing(5),\n      padding: theme.spacing(3)\n   },\n   searchInput: {\n      width: '75%'\n   },\n   addButton: {\n      position: 'absolute',\n      right: '10px'\n   }\n}));\n\nexport type HeadCell = {\n   id: string\n   label: string\n   isDisableSorting?: true\n}\n\n\nconst headCells: HeadCell[] = [\n   {id: 'name', label: 'Pack Name'},\n   {id: 'cardsCount', label: 'Count Of Cards'},\n   {id: 'updated', label: 'Date Of Updated'},\n   {id: 'deckCover', label: 'Image', isDisableSorting: true},\n   {id: 'action', label: 'Action', isDisableSorting: true},\n   {id: 'cards', label: 'Cards', isDisableSorting: true},\n]\n\n\nexport const PacksList = () => {\n   console.log('render PacksList component');\n   const classes = useStyles();\n\n   const [searchFn, setSearchFn] = useState({fn: (items: PackType[]) => items});\n\n   const dispatch = useDispatch();\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\n   const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\n\n   const records = useSelector<AppRootStateType, PackType[]>(state => state.packs.cardPacks);\n\n   const {TblContainer, TblHead, TblPaginator, recordsAfterPagingAndSorting} = useTable(records, headCells, searchFn);\n\n   useEffect(() => {\n      dispatch(getCardPacks());\n   }, [dispatch]);\n\n\n   if (!isLoggedIn) {\n      return <Redirect to={PATH.SIGN_IN_PATH}/>\n   }\n\n   const handleSearch = (e: ChangeEvent<HTMLInputElement>) => {\n      const target = e.target;\n\n      setSearchFn({\n         fn: (items: PackType[]) => {\n            if (target.value === '') {\n               return items;\n            }\n\n            return items.filter(item => item.name.toLowerCase().startsWith(target.value));\n         }\n      });\n   }\n\n   const addNewItemHandler = () => {\n      dispatch(addCardPack());\n   }\n\n   const editItemHandler = (item: PackType) => {\n      dispatch(updateCardPack(item._id));\n   }\n\n   const deleteItemHandler = (item: PackType) => {\n      dispatch(deleteCardPack(item._id));\n   }\n\n   const handleCardsClick = (item: PackType) => {\n      history.push(`${PATH.CARDS_PATH}/${item._id}`);\n   }\n\n   return (\n      <>\n         <Paper className={classes.pageContent}>\n            <Toolbar>\n               <TextField label='Search Pack'\n                          variant='outlined'\n                          className={classes.searchInput}\n                          onChange={handleSearch}\n                          InputProps={{\n                             startAdornment: (\n                                <InputAdornment position=\"start\">\n                                   <Search/>\n                                </InputAdornment>\n                             ),\n                          }}/>\n               <Button variant='outlined'\n                       startIcon={<AddIcon/>}\n                       disabled={status === 'loading'}\n                       color={'secondary'}\n                       className={classes.addButton}\n                       onClick={addNewItemHandler}\n               > Add New </Button>\n            </Toolbar>\n            <TblContainer>\n               <TblHead/>\n               <TableBody>\n                  {\n                     recordsAfterPagingAndSorting().map((item) =>\n                        (<TableRow key={item._id}>\n                           <TableCell>{item.name}</TableCell>\n                           <TableCell>{item.cardsCount}</TableCell>\n                           <TableCell>{item.updated}</TableCell>\n                           <TableCell>{item.deckCover}</TableCell>\n                           <TableCell>\n                              <ActionButton color={'primary'}\n                                            onClick={() => editItemHandler(item)}\n                                            disabled={status === 'loading'}\n                              >\n                                 <EditOutlinedIcon fontSize=\"small\"/>\n                              </ActionButton>\n                              <ActionButton\n                                 color=\"secondary\"\n                                 onClick={() => deleteItemHandler(item)}\n                                 disabled={status === 'loading'}\n                              >\n                                 <CloseIcon fontSize=\"small\" />\n                              </ActionButton>\n                           </TableCell>\n                           <TableCell>\n                              <Button\n                                 variant='outlined'\n                                 color='secondary'\n                                 onClick={() => handleCardsClick(item)}\n                              >\n                                 Cards\n                              </Button>\n                           </TableCell>\n                        </TableRow>)\n                     )\n                  }\n               </TableBody>\n            </TblContainer>\n            <TblPaginator/>\n         </Paper>\n      </>\n   );\n}\n\n\n","import React from 'react';\nimport {Switch, Redirect, Route} from 'react-router-dom';\nimport {SignIn} from '../../authorization/a1-SignIn/SignIn';\nimport {Container} from '@material-ui/core';\nimport {Profile} from '../../Profile/Profile';\nimport {ProfileContainer} from '../../Profile/ProfileContainer';\nimport {SignUp} from '../../authorization/a2-SignUp/SignUp';\nimport {ForgotPassword} from '../../authorization/a3-ForgotPassword/ForgotPassword';\nimport {RecoveryPassword} from '../../authorization/a4-RecoveryPassword/RecoveryPassword';\nimport {PacksList} from '../../PacksList/PacksList';\nimport {CardsList} from '../../PacksList/CardsList/CardsList';\n\nexport enum PATH {\n   SIGN_IN_PATH = '/sign-in',\n   PROFILE_PATH = '/profile',\n   REGISTER_PATH = '/register',\n   FORGOT_PATH = '/forgot',\n   SET_NEW_PASSWORD_PATH = '/set-new-password/:token?',\n   PACKS_PATH = '/decks',\n   CARDS_PATH = '/cards',\n}\n\n\nexport const Routes: React.FC = () => {\n   return (\n      <>\n         <Switch>\n            <Route exact path={'/'} render={() => <Redirect to={PATH.PACKS_PATH}/>}/>\n            <Route path={PATH.PROFILE_PATH} render={() => <ProfileContainer/>}/>\n\n            <Route path={PATH.SIGN_IN_PATH} render={() => <SignIn/>}/>\n            <Route path={PATH.REGISTER_PATH} render={() => <SignUp/>}/>\n            <Route path={PATH.FORGOT_PATH} render={() => <ForgotPassword/>}/>\n            <Route path={PATH.SET_NEW_PASSWORD_PATH} render={() => <RecoveryPassword/>}/>\n            <Route path={PATH.PACKS_PATH} render={() => <PacksList/>}/>\n            <Route exact path={PATH.CARDS_PATH} render={() => <CardsList/>}/>\n            <Route path={'/cards/:id?'} render={() => <CardsList/>}/>\n\n            {/*<Route path={STAND_PATH} render={() => <DemoSuperComponentsStand/>}/>*/}\n         </Switch>\n      </>\n   );\n};","import {\n   Button,\n   Grid,\n   InputAdornment, makeStyles,\n   Paper,\n   TableBody,\n   TableCell,\n   TableRow,\n   TextField,\n   Toolbar\n} from '@material-ui/core';\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport React, {useEffect} from 'react';\nimport {Redirect, useParams} from 'react-router-dom';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../../app/store';\nimport {PATH} from '../../main/m3-Routes/Routes';\nimport {theme} from '../../../utils/theme';\nimport {getCards} from './cardsReducer';\nimport {useTable} from '../../../components/useTable/useTable';\nimport {CardType} from '../../../api/api';\nimport {HeadCell} from '../PacksList';\nimport {Search} from '@material-ui/icons';\nimport AddIcon from '@material-ui/icons/Add';\nimport {ActionButton} from '../../../components/ActionButton/ActionButton';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst useStyles = makeStyles(theme => ({\n   pageContent: {\n      margin: theme.spacing(5),\n      padding: theme.spacing(3)\n   }\n}));\n\nconst headCells: HeadCell[] = [\n   {id: 'question', label: 'Pack Name'},\n   {id: 'answer', label: 'Count Of Cards'},\n   {id: 'grade', label: 'Count Of Cards'},\n   {id: 'updated', label: 'Date Of Updated'},\n   // {id: 'action', label: 'Action', isDisableSorting: true},\n]\n\n\nexport const CardsList = () => {\n   console.log('render PacksList component');\n   const classes = useStyles();\n   const dispatch = useDispatch();\n   const {id} = useParams<{id?: string}>();\n\n   useEffect(() => {\n      id && dispatch(getCards(id));\n   }, [dispatch, id])\n\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\n   const records = useSelector<AppRootStateType, CardType[]>(state => state.cards.cards);\n\n   //const {TblContainer, TblHead, TblPaginator, recordsAfterPagingAndSorting} = useTable(records, headCells);\n\n   if (!isLoggedIn) {\n      return <Redirect to={PATH.SIGN_IN_PATH}/>\n   }\n\n   return (\n      <>\n         cards\n         {/*<Paper className={classes.pageContent}>\n            <TblContainer>\n               <TblHead/>\n               <TableBody>\n                  {\n                     recordsAfterPagingAndSorting().map((item) =>\n                        (<TableRow key={item._id}>\n                           <TableCell>{item.name}</TableCell>\n                           <TableCell>{item.cardsCount}</TableCell>\n                           <TableCell>{item.updated}</TableCell>\n                           <TableCell>{item.deckCover}</TableCell>\n                           <TableCell>\n                              <ActionButton color={'primary'}\n                                            onClick={() => editItemHandler(item)}\n                                            disabled={status === 'loading'}\n                              >\n                                 <EditOutlinedIcon fontSize=\"small\"/>\n                              </ActionButton>\n                              <ActionButton\n                                 color=\"secondary\"\n                                 onClick={() => deleteItemHandler(item)}\n                                 disabled={status === 'loading'}\n                              >\n                                 <CloseIcon fontSize=\"small\" />\n                              </ActionButton>\n                           </TableCell>\n                           <TableCell>\n                              <Button\n                                 variant='outlined'\n                                 color='secondary'\n                                 onClick={() => handleCardsClick(item)}\n                              >\n                                 Cards\n                              </Button>\n                           </TableCell>\n                        </TableRow>)\n                     )\n                  }\n               </TableBody>\n            </TblContainer>\n            <TblPaginator/>\n         </Paper>*/}\n      </>\n   );\n}","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../app/store';\nimport {setAppError} from '../../app/appReducer';\n\nfunction Alert(props: AlertProps) {\n   return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n   const dispatch = useDispatch();\n   const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\n\n   const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n      if (reason === 'clickaway') {\n         return\n      }\n\n      dispatch(setAppError(null));\n   }\n\n   return (\n      <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\n         <Alert onClose={handleClose} severity=\"error\">\n            {error}\n         </Alert>\n      </Snackbar>\n   )\n}","import React, {useState} from 'react';\n\nimport {\n   AppBar,\n   Button,\n   createStyles,\n   IconButton,\n   LinearProgress,\n   makeStyles,\n   Theme,\n   Toolbar,\n   Typography\n} from '@material-ui/core';\nimport {ErrorSnackbar} from '../../../components/ErrorSnackbar/ErrorSnackbar';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../../app/store';\nimport {RequestStatusType} from '../../../app/appReducer';\nimport {PATH} from '../m3-Routes/Routes';\nimport {logout} from '../../authorization/a1-SignIn/authReducer';\nimport {NavLink} from 'react-router-dom';\nimport {history} from '../../../index';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n   createStyles({\n      root: {\n         flexGrow: 1,\n      },\n      logo: {\n         marginRight: theme.spacing(3),\n      },\n      links: {\n         flexGrow: 1,\n      },\n      navLink: {\n         color: 'white',\n         textDecoration: 'none',\n         paddingLeft: '15px'\n      },\n      selectedLink: {\n         color: '#4caf50   '\n      }\n   }),\n);\n\n\nexport const Header: React.FC = () => {\n   console.log('m1-Header component')\n   const classes = useStyles();\n   const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n\n   const dispatch = useDispatch();\n   const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\n\n   const handlerLogin = () => {\n      history.push(PATH.SIGN_IN_PATH);\n   }\n\n   const handleLogout = async () => {\n      setIsSubmitting(true);\n      await dispatch(logout());\n      setIsSubmitting(false);\n   }\n\n   return (\n      <>\n         <ErrorSnackbar/>\n         <div className={classes.root}>\n            <AppBar position=\"static\" color={'primary'}>\n               <Toolbar>\n                  <IconButton edge=\"start\" className={classes.logo} color=\"inherit\" aria-label=\"logo\">\n                     CARDS\n                  </IconButton>\n                  <Typography variant=\"h6\" className={classes.links}>\n                     <NavLink activeClassName={classes.selectedLink} to={PATH.PROFILE_PATH}\n                              className={classes.navLink}>Profile</NavLink>\n\n                     <NavLink activeClassName={classes.selectedLink} to={PATH.PACKS_PATH}\n                              className={classes.navLink}>Packs</NavLink>\n                  </Typography>\n                  <Typography variant=\"h6\">\n\n                  </Typography>\n                  {!isLoggedIn && <Button color=\"inherit\" onClick={handlerLogin}>Login</Button>}\n                  {isLoggedIn && <Button color=\"inherit\" onClick={handleLogout} disabled={isSubmitting}>Logout</Button>}\n               </Toolbar>\n            </AppBar>\n         </div>\n         {status === 'loading' && <LinearProgress/>}\n      </>\n   );\n};\n\n","import React from 'react';\nimport {Routes} from '../m3-Routes/Routes';\nimport {Header} from '../m1-Header/Header';\nimport {theme} from '../../../utils/theme';\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport {CssBaseline, makeStyles} from '@material-ui/core';\n\nconst useStyles = makeStyles({\n   appMain: {\n      width: '100%'\n   }\n})\n\nexport const Main: React.FC = () => {\n   const classes = useStyles();\n\n   return (\n      <ThemeProvider theme={theme}>\n         <Header/>\n\n         <div className={classes.appMain}>\n            <Routes/>\n         </div>\n         <CssBaseline/>\n      </ThemeProvider>\n   );\n};","import React, {useEffect} from 'react';\nimport './App.css';\n\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from './store';\nimport {initializeApp} from './appReducer';\nimport {CircularProgress} from '@material-ui/core';\nimport {theme} from '../utils/theme';\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport {Main} from '../features/main/m2-Main/Main';\n\n\nfunction App() {\n   const dispatch = useDispatch();\n   const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized);\n\n   useEffect(() => {\n      dispatch(initializeApp());\n   }, [dispatch])\n\n   if (!isInitialized) {\n      return (\n         <ThemeProvider theme={theme}>\n            <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n               <CircularProgress color={'primary'}/>\n            </div>\n         </ThemeProvider>\n      );\n   }\n\n   return (\n      <div className=\"App\">\n         <Main/>\n      </div>\n   );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, compose, createStore } from \"redux\";\nimport { combineReducers } from \"redux\";\nimport thunk from 'redux-thunk';\nimport {authReducer} from '../features/authorization/a1-SignIn/authReducer';\nimport {appReducer} from './appReducer';\nimport {packsReducer} from '../features/PacksList/packsReducer';\nimport {cardsReducer} from '../features/PacksList/CardsList/cardsReducer';\n\nconst rootReducer = combineReducers({\n   app: appReducer,\n   auth: authReducer,\n   packs: packsReducer,\n   cards: cardsReducer\n});\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\n\ndeclare global {\n   interface Window {\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n   }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter, Router} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport createHistory from 'history/createHashHistory';\n\nexport const history = createHistory();\n\nReactDOM.render(\n   <React.StrictMode>\n      <HashRouter>\n         {/*<Router history={history}>*/}\n            <Provider store={store}>\n               <App/>\n            </Provider>\n         {/*</Router>*/}\n      </HashRouter>\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}